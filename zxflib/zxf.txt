zxf.lib
~~~~~~~

This (DICE) link library provides an interface for programs wanting to access
files created by the ZX Spectrum emulator.

-----------------------------------------------------------------------------

result = zxfCreate(ZXFILE **ZXF, char *name, ULONG flags)

Creates a ZXFILE structure ready for use. You MUST supply the ZXF_ZXFILE
flag. You may optionally supply the ZXF_HEADER flag to create a blank header
containing the Spectrum file name of your choice. ZXFILE should by NULL.

You may also set the header file type using one of the ZXF_Txxx flags should
you choose the create a header.

EXAMPLE:
	ZXFILE *ZXFxyzzy;
	rc=zxfCreate(&ZXFxyzzy,"Xyzzy",ZXF_ZXFILE|ZXF_HEADER|ZXF_TBYTES);

-----------------------------------------------------------------------------

result = zxfFree(ZXFILE *ZXF, ULONG flags)

Frees specified resources allocated. You may choose a combination of the
header, bytes, and the ZXFILE structure itself, though the ZXFILE struct
can only be freed if both header and bytes are either free beforehand or
freed up at the same time.

Shortcuts exist for header and bytes (ZXF_ALLBLOCKS) and all resources
(ZXF_EVERYTHING). If you specify all resources, no 'missing block' errors
will be returned.

EXAMPLE:
	ZXFILE *ZXFtemp;
	rc=zxfFree(ZXFtemp,ZXF_BYTES);

-----------------------------------------------------------------------------

result = zxfInsert(ZXFILE *, UBYTE *data, ULONG flags)

Hooks a data block into the ZXFILE structure, providing the specified block
isn't already in use.

EXAMPLE:
	ZXFILE *zxfile;
	UBYTE *data;
	rc=zxfInsert(zxfile,data,ZXF_BYTES);

-----------------------------------------------------------------------------

result = zxfReadFile(ZXFILE *ZXF, char *name, ULONG flags)

Reads a file into an initialized ZXFILE structure. Either a single block or
both header and bytes blocks can be loaded, though ZXF_ZXNAME must be
specified if loading both blocks at once.

EXAMPLE:
	ZXFILE *zxtext;
	rc=zxfReadFile(zxtext,"Letter_t2",ZXF_ALLBLOCKS|ZXF_ZXNAME);

-----------------------------------------------------------------------------

result = zxfWriteFile(ZXFILE *ZXF, char *name, ULONG flags)

Writes a file from an initialized ZXFILE structure. There MUST be a header
in the ZXFILE even if you only wish to write a 'bytes' file. The reason is
that the header contains the length of the bytes file. Again, you may either
write a single block or both and again if you write both you must specify
ZXF_ZXNAME.

EXAMPLE:
	ZXFILE *ZXtmp;
	zxfWriteFile(ZXtmp,"Testing123.header",ZXF_HEADER);

-----------------------------------------------------------------------------

FLAGS
~~~~~

ZXF_HEADER		zxfCreate:	Also create header
			other:		Selects 'header' for operation

ZXF_BYTES		zxfCreate:	***INVALID***
			other:		Selects 'bytes' for operation

ZXF_ALLBLOCKS		<<< shortcut for ZXF_HEADER|ZXF_BYTES >>>
			zxfCreate:	***INVALID***
			zxfInsert:	***INVALID***
			other:		Selects 'header' and 'bytes' for op

ZXF_ZXFILE		zxfCreate:	MUST be specified - create ZXFILE
			zxfFree:	Free ZXFILE structure
			other:		---ignored---

ZXF_EVERYTHING		<<< shortcut for ZXF_ZXFILE|ZXF_HEADER|ZXF_BYTES >>>
			zxfCreate:	***INVALID***
			zxfInsert:	***INVALID***
			zxfFree:	Free all - no 'missing' errors
			zxfWriteFile:	Write all - no 'bytes missing'
			other:		Selects 'header' and 'bytes' for op

ZXF_TPROGRAM		zxfCreate:	If ZXF_HEADER set, type=Program
			other:		---ignored---

ZXF_TNARRAY		zxfCreate:	If ZXF_HEADER set, type=Number Array
			other:		---ignored---

ZXF_TCARRAY		zxfCreate:	If ZXF_HEADER set, type=Char Array
			other:		---ignored---

ZXF_TBYTES		zxfCreate:	If ZXF_HEADER set, type=Bytes
			other:		---ignored---

ZXF_ZXNAME		zxfReadFile:	Specified name has no .header/.bytes
			zxfWriteFile:	Specified name has no .header/.bytes
			other:		---ignored---

---------------------------------------------------------------------------

ERRORS
~~~~~~

ZXF_OKAY		all:		No error - operation successful

ZXF_NOMEMORY		zxfCreate:	Not enough memory for ZXFILE/header
			zxfReadFile:	Not enough memory for data block(s)

ZXF_NOBLOCK		zxfFree:	Block(s) specified not present
			zxfWriteFile:	ZXF_BYTES specified, 'bytes' missing

ZXF_BLOCKEXISTS		zxfFree:	ZXF_ZXFILE specified, ZXFILE !empty
			zxfInsert:	Block specified already present
			zxfReadFile:	Block(s) specified already present

ZXF_NAMETOOLONG		zxfCreate:	ZX file name specified too long

ZXF_NODATA		zxfInsert:	NULL pointer passed

ZXF_NOFILE		zxfReadFile:	Unable to open file(s)
			zxfWriteFile:	Unable to open file(s)

ZXF_STRANGEBLOCK	zxfReadFile:	Strange block type found

ZXF_PARITYERROR		zxfReadFile:	"R Tape Loading Error" - Corrupt?

ZXF_SIZEMISMATCH	zxfReadFile:	Header/Bytes file wrong length

ZXF_READERROR		zxfReadFile:	Error reading from file

ZXF_WRITEERROR		zxfWriteFile:	Error writing to file

ZXF_NOHEADER		zxfWriteFile:	No header at time of call

ZXF_INSANE		zxfCreate:	ZXF_BYTES specified OR
					More than one file type specified OR
					ZXF_ZXFILE not specified
			zxfFree:	Nothing specified to be freed
			zxfInsert:	No/all block specified to be set
			zxfReadFile:	Nothing specified to be loaded OR
					All blocks specified, no ZXF_ZXNAME
			zxfWriteFile:	Nothing specified to be written

ZXF_NULLZXFILE		zxfFree:	ZXFILE is NULL
			zxfInsert:	ZXFILE is NULL
			zxfReadFile:	ZXFILE is NULL
			zxfWriteFile:	ZXFILE is NULL

ZXF_INITZXFILE		zxfCreate:	ZXFILE already initialized

ZXF_NOTAG		zxfFree:	ZXFILE is invalid
			zxfInsert:	ZXFILE is invalid
			zxfReadFile:	ZXFILE is invalid
			zxfWriteFile:	ZXFILE is invalid
